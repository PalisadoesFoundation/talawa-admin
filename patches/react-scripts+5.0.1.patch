'use strict';

const fs = require('fs');

module.exports = function (proxy, allowedHost) {
  const disableFirewall =
    !proxy || process.env.DANGEROUSLY_DISABLE_HOST_CHECK === 'true';
    
  return {
    allowedHosts: disableFirewall ? 'all' : [allowedHost],
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': '*',
      'Access-Control-Allow-Headers': '*',
    },
    compress: true,
    static: {
      // Serve files from the `public` directory.
      // Files in `public` will be served at the root path.
      directory: paths.appPublic,
      publicPath: [paths.publicUrlOrPath],
      watch: {
        // Watch files in `src` directory for changes but ignore `node_modules`.
        // This avoids unnecessary CPU load.
        ignored: ignoredFiles(paths.appSrc),
      },
    },
    client: {
      webSocketURL: {
        hostname: sockHost,
        pathname: sockPath,
        port: sockPort,
      },
      overlay: {
        errors: true,
        warnings: false,
      },
    },
    devMiddleware: {
      // Ensure the `publicPath` used here matches the one specified in webpack config.
      // This allows users to land on paths without a trailing slash.
      publicPath: paths.publicUrlOrPath.slice(0, -1),
    },
    https: getHttpsConfig(),
    host,
    historyApiFallback: {
      // Ensure history fallback works for paths with dots.
      disableDotRule: true,
      index: paths.publicUrlOrPath,
    },
    proxy,

    // Replacing deprecated onBeforeSetupMiddleware and onAfterSetupMiddleware
    setupMiddlewares: (middlewares, devServer) => {
      if (!devServer) {
        throw new Error('webpack-dev-server is not defined');
      }

      // Equivalent to `onBeforeSetupMiddleware` logic:
      // Middleware to enable source map evaluation and error overlays.
      devServer.app.use(evalSourceMapMiddleware(devServer));

      if (fs.existsSync(paths.proxySetup)) {
        // Register user-provided middleware for proxy setup.
        require(paths.proxySetup)(devServer.app);
      }

      // Equivalent to `onAfterSetupMiddleware` logic:
      // Middleware to redirect requests to `PUBLIC_URL` or `homepage` if the URL does not match.
      devServer.app.use(redirectServedPath(paths.publicUrlOrPath));
      
      // Middleware to handle the service worker, ensuring it's a no-op in development.
      devServer.app.use(noopServiceWorkerMiddleware(paths.publicUrlOrPath));

      // Return the updated middlewares array.
      return middlewares;
    }
  };
};
