{
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },

  // Specify the rulesets from other ESLint Plugins tobe used
  "extends": [
    "plugin:react/recommended",
    "eslint:recommended",
    "plugin:jest/recommended",
    "plugin:prettier/recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2018,
    "sourceType": "module"
  },

  // Specify the ESLint plugins tobe used
  "plugins": [
    "react",
    "@typescript-eslint",
    "jest",
    "import",
    "eslint-plugin-tsdoc"
  ],
  "rules": {
    "react/destructuring-assignment": ["off"],
    // "@typescript-eslint/no-explicit-any": ["off"],
    "@typescript-eslint/explicit-module-boundary-types": ["off"],
    "react/no-multi-comp": [
      "error",
      {
        "ignoreStateless": false
      }
    ],
    "react/jsx-filename-extension": [
      "error",
      {
        "extensions": [".tsx"]
      }
    ],
    "import/no-duplicates": "error",
    "tsdoc/syntax": "error",
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-var-requires": "error",
    "@typescript-eslint/ban-types": "error",
    "@typescript-eslint/no-duplicate-enum-values": "error",
    "@typescript-eslint/array-type": "error",
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/explicit-function-return-type": [
      2,
      {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      // Interfaces must begin with Interface or TestInterface followed by a PascalCase name
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "prefix": ["Interface", "TestInterface"]
      },
      // Type Aliases must be in PascalCase
      {
        "selector": ["typeAlias", "typeLike", "enum"],
        "format": ["PascalCase"]
      },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "prefix": ["T"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "parameter",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "function",
        "format": ["camelCase"]
      },
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "require"
      },

      { "selector": "variable", "modifiers": ["exported"], "format": null }
    ],
    // Ensures that components are always written in PascalCase
    "react/jsx-pascal-case": [
      "error",
      { "allowAllCaps": false, "allowNamespace": false }
    ],

    // Enforces whitespace around equal sign operators
    "react/jsx-equals-spacing": ["warn", "never"],
    "react/no-this-in-sfc": "error",

    // All tests must need not have an assertion
    "jest/expect-expect": 0,

    // Ensures that components are always indented by 2 spaces
    "react/jsx-indent": ["warn", 2],
    "react/jsx-tag-spacing": [
      "warn",
      {
        "afterOpening": "never",
        "beforeClosing": "never",
        "beforeSelfClosing": "always"
      }
    ],

    // Enforce Strictly functional components
    "react/no-unstable-nested-components": ["error", { "allowAsProps": true }],
    "react/function-component-definition": [
      0,
      { "namedComponents": "function-declaration" }
    ]
  },

  // Let ESLint use the react version in the package.json
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
