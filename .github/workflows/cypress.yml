name: Running Cypress Tests

on:
  pull_request:
    branches: [main, develop]

jobs:
  Setup-Run-Cypress-Tests:
    timeout-minutes: 35
    runs-on: ubuntu-latest
    env:
      REACT_APP_TALAWA_URL: http://127.0.0.1:4000/graphql
    steps:
      - name: Checkout Backend
        uses: actions/checkout@v4
        with:
          repository: palisadoesFoundation/talawa-api
          ref: develop

      - name: Setup Devcontainer
        run: |
          npm install -g @devcontainers/cli
          cp envFiles/.env.devcontainer .env
          devcontainer up --workspace-folder .
          echo "Waiting for devcontainer services to be ready..."
          sleep 10

      # - name: Fix .env Formatting
      #   run: |
      #     sed -i 's/^CLOUDBEAVER_SERVER_NAME=.*/CLOUDBEAVER_SERVER_NAME="Talawa CloudBeaver Server"/' .env
      #     sed -i 's/^API_ADMINISTRATOR_USER_EMAIL_ADDRESS=.*/API_ADMINISTRATOR_USER_EMAIL_ADDRESS=testsuperadmin@example.com/' .env
      #     echo "=== Fixed .env contents ==="
      #     grep -E 'CLOUDBEAVER_SERVER_NAME|API_ADMINISTRATOR_USER_EMAIL_ADDRESS' .env

      - name: Install Backend Dependencies
        run: docker exec talawa-api-1 /bin/bash -c 'pnpm install'

      - name: Apply Database Migrations
        run: |
          docker exec talawa-api-1 /bin/bash -c 'pnpm apply_drizzle_migrations'
    
      # - name: Verify .env Configuration
      #   run: |
      #     echo "=== Verifying .env Configuration ==="
      #     echo "Container working directory and contents:"
      #     docker exec talawa-api-1 /bin/bash -c 'pwd && ls -la .env'
      #     echo "=== Complete .env file contents ==="
      #     docker exec talawa-api-1 /bin/bash -c 'cat .env'
      #     echo "=== .env file verification complete ==="

      # - name: Seed Sample Data
      #   run: |
      #     echo "=== Seeding Sample Data ==="
      #     if docker exec talawa-api-1 /bin/bash -c 'set -a; source ./.env; set +a; pnpm run add:sample_data'; then
      #       echo "✅ Seeding completed successfully"
      #     else
      #       echo "❌ Seeding failed - Debug Information:"
      #       echo "Container status:"
      #       docker ps | grep talawa
      #       echo "Recent container logs:"
      #       docker logs talawa-api-1 --tail 50
      #       echo "=== Users table contents ==="
      #       docker exec talawa-postgres-1 psql -U talawa -d talawa \
      #       -c "SELECT id, email_address, name, role FROM users;" 2>/dev/null || echo "Could not query users"
      #       exit 1
      #     fi

      # - name: Debug Database State
      #   run: |
      #     echo "=== Database Tables ==="
      #     docker exec talawa-postgres-1 psql -U talawa -d talawa -c "\dt"
      #     echo "=== Migration Status ==="
      #     docker exec talawa-postgres-1 psql -U talawa -d talawa \
      #       -c "SELECT * FROM information_schema.tables WHERE table_schema = 'public';" | head -10

      - name: Start Backend Server
        run: |
          docker exec -d talawa-api-1 /bin/bash -c 'pnpm run start_development_server'
          sleep 15

      - name: Wait for GraphQL endpoint to become available
        if: success()
        run: |
          echo "Waiting for the GraphQL endpoint to become available..."
          for i in {1..40}; do
            if ! docker ps | grep -q talawa-api-1; then
              echo "Container talawa-api-1 not found. Waiting..."
              sleep 2
              continue
            fi
            docker exec talawa-api-1 which curl >/dev/null 2>&1 || {
              docker exec talawa-api-1 apt-get update && \
              docker exec talawa-api-1 apt-get install -y curl
            }
            RESPONSE=$(docker exec talawa-api-1 curl -s -X POST \
              http://127.0.0.1:4000/graphql -H "Content-Type: application/json" \
              -d '{"query":"{__typename}"}' 2>/dev/null || echo "Connection failed")
            if echo "$RESPONSE" | grep -q '__typename'; then
              echo "GraphQL endpoint is available, Backend is ready!"
              exit 0
            fi
            echo "GraphQL endpoint not ready. Retrying in 2 seconds..."
            sleep 2
          done
          echo "GraphQL endpoint did not become available within the expected time."
          exit 1

      - name: Seed Sample Data
        run: |
          echo "=== Seeding Sample Data ==="
          if docker exec talawa-api-1 /bin/bash -c 'set -a; source ./.env; set +a; pnpm run add:sample_data'; then
            echo "✅ Seeding completed successfully"
          else
            echo "❌ Seeding failed - Debug Information:"
            echo "Container status:"
            docker ps | grep talawa
            echo "Recent container logs:"
            docker logs talawa-api-1 --tail 50
            echo "=== Users table contents ==="
            docker exec talawa-postgres-1 psql -U talawa -d talawa \
            -c "SELECT id, email_address, name, role FROM users;" 2>/dev/null || echo "Could not query users"
            exit 1
          fi
                    
      - name: Checkout Frontend
        uses: actions/checkout@v4
        with:
          path: frontend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Setup .env
        run: |
          pwd && cp frontend/.env.example frontend/.env
          echo $REACT_APP_TALAWA_URL
          curl -s -X POST http://127.0.0.1:4000/graphql \
            -H "Content-Type: application/json" \
            -d '{"query":"{__typename}"}' 2>/dev/null

      - name: Run Cypress Tests with Dev Server
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          start: npm run serve
          wait-on: 'http://localhost:4321'
          wait-on-timeout: 120
          config-file: cypress.config.ts
          install: false
        env:
          CYPRESS_BASE_URL: http://localhost:4321
          CYPRESS_API_URL: http://127.0.0.1:4000/graphql
          REACT_APP_BACKEND_WEBSOCKET_URL: ws://127.0.0.1:4000/graphql


        #         - name: Fix .env Formatting
        # run: |
        #   # Fix unquoted values with spaces
        #   sed -i 's/^CLOUDBEAVER_SERVER_NAME=.*/CLOUDBEAVER_SERVER_NAME="Talawa CloudBeaver Server"/' .env
        #   sed -i 's/^FRONTEND_URL=.*/FRONTEND_URL="http:\/\/localhost:4321"/' .env
        #   # Update administrator email to match sample data
        #   sed -i 's/^API_ADMINISTRATOR_USER_EMAIL_ADDRESS=.*/API_ADMINISTRATOR_USER_EMAIL_ADDRESS=testsuperadmin@example.com/' .env
        #   echo "=== Fixed .env contents ==="
        #   grep -E 'CLOUDBEAVER_SERVER_NAME|FRONTEND_URL|API_ADMINISTRATOR_USER_EMAIL_ADDRESS' .env